{"ast":null,"code":"import { rest } from 'msw';\nimport articlesData from './articles.json';\nimport commentsData from './comments.json';\nconst userComments = {};\n\nfunction mockDelay(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nexport const handlers = [rest.get('/api/articles', (req, res, ctx) => {\n  mockDelay(500);\n  return res(ctx.status(200), ctx.json(articlesData.map(article => ({\n    id: article.id,\n    title: article.title,\n    preview: article.preview,\n    image: article.image\n  }))));\n}), rest.get('/api/articles/:articleId', (req, res, ctx) => {\n  mockDelay(500);\n  const {\n    articleId\n  } = req.params;\n  return res(ctx.status(200), ctx.json(articlesData.find(article => article.id === parseInt(articleId))));\n}), rest.get('/api/articles/:articleId/comments', (req, res, ctx) => {\n  mockDelay(500);\n  const {\n    articleId\n  } = req.params;\n  const userCommentsForArticle = userComments[articleId] || [];\n  return res(ctx.status(200), ctx.json({\n    articleId: parseInt(articleId),\n    comments: commentsData.filter(comment => comment.articleId === parseInt(articleId)).concat(userCommentsForArticle)\n  }));\n}), rest.post('/api/articles/:articleId/comments', (req, res, ctx) => {\n  mockDelay(500);\n  const {\n    articleId\n  } = req.params;\n  const commentResponse = {\n    id: commentsData.length,\n    articleId: parseInt(articleId),\n    text: JSON.parse(req.body).comment\n  };\n\n  if (userComments[articleId]) {\n    userComments[articleId].push(commentResponse);\n  } else {\n    userComments[articleId] = [commentResponse];\n  }\n\n  return res(ctx.status(200), ctx.json(commentResponse));\n})];","map":{"version":3,"sources":["C:/Users/Andres R. Bucheli/Desktop/SOFTWARE ENGINEER/PORTFOLIO/ROCK-NEWS-REDUX/src/mocks/handlers.js"],"names":["rest","articlesData","commentsData","userComments","mockDelay","milliseconds","date","Date","now","currentDate","handlers","get","req","res","ctx","status","json","map","article","id","title","preview","image","articleId","params","find","parseInt","userCommentsForArticle","comments","filter","comment","concat","post","commentResponse","length","text","JSON","parse","body","push"],"mappings":"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","sourcesContent":["import { rest } from 'msw';\r\nimport articlesData from './articles.json';\r\nimport commentsData from './comments.json';\r\n\r\nconst userComments = {};\r\n\r\nfunction mockDelay(milliseconds) {\r\n  const date = Date.now();\r\n  let currentDate = null;\r\n  do {\r\n    currentDate = Date.now();\r\n  } while (currentDate - date < milliseconds);\r\n}\r\n\r\nexport const handlers = [\r\n  rest.get('/api/articles', (req, res, ctx) => {\r\n    mockDelay(500);\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json(\r\n        articlesData.map((article) => ({\r\n          id: article.id,\r\n          title: article.title,\r\n          preview: article.preview,\r\n          image: article.image,\r\n        }))\r\n      )\r\n    );\r\n  }),\r\n  rest.get('/api/articles/:articleId', (req, res, ctx) => {\r\n    mockDelay(500);\r\n    const { articleId } = req.params;\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json(\r\n        articlesData.find((article) => article.id === parseInt(articleId))\r\n      )\r\n    );\r\n  }),\r\n  rest.get('/api/articles/:articleId/comments', (req, res, ctx) => {\r\n    mockDelay(500);\r\n    const { articleId } = req.params;\r\n    const userCommentsForArticle = userComments[articleId] || [];\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        articleId: parseInt(articleId),\r\n        comments: commentsData\r\n          .filter((comment) => comment.articleId === parseInt(articleId))\r\n          .concat(userCommentsForArticle),\r\n      })\r\n    );\r\n  }),\r\n  rest.post('/api/articles/:articleId/comments', (req, res, ctx) => {\r\n    mockDelay(500);\r\n    const { articleId } = req.params;\r\n    const commentResponse = {\r\n      id: commentsData.length,\r\n      articleId: parseInt(articleId),\r\n      text: JSON.parse(req.body).comment,\r\n    };\r\n\r\n    if (userComments[articleId]) {\r\n      userComments[articleId].push(commentResponse);\r\n    } else {\r\n      userComments[articleId] = [commentResponse];\r\n    }\r\n\r\n    return res(ctx.status(200), ctx.json(commentResponse));\r\n  }),\r\n];"]},"metadata":{},"sourceType":"module"}