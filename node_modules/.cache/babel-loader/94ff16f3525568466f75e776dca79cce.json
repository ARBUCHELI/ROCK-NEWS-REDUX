{"ast":null,"code":"// Import createAsyncThunk and createSlice here.\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; // Create loadCommentsForArticleId here.\n\nexport const loadCommentsForArticleId = createAsyncThunk('comments/loadCommentsForArticleId', async id => {\n  console.log(\"inside dispatch\");\n  const data = await fetch(`api/articles/${id}/comments`);\n  const json = await data.json();\n  return json;\n}); // Create postCommentForArticleId here.\n\nexport const postCommentForArticleId = createAsyncThunk('comments/postCommentForArticleId', async ({\n  articleId,\n  comment\n}) => {\n  const requestBody = JSON.stringify({\n    comment: comment\n  });\n  const response = await fetch(`api/articles/${articleId}/comments`, {\n    method: \"POST\",\n    body: requestBody\n  });\n  const json = await response.json();\n  return json;\n});\nexport const commentsSlice = createSlice({\n  name: 'comments',\n  initialState: {\n    // Add initial state properties here.\n    byArticleId: {},\n    isLoadingComments: false,\n    failedToLoadComments: false,\n    createCommentIsPending: false,\n    failedToCreateComment: false\n  },\n  // Add extraReducers here.\n  extraReducers: builder => {\n    builder.addCase(loadCommentsForArticleId.pending, state => {\n      state.isLoadingComments = true;\n      state.failedToLoadComments = false;\n    }).addCase(loadCommentsForArticleId.fulfilled, (state, action) => {\n      state.isLoadingComments = false;\n      state.failedToLoadComments = false;\n      state.byArticleId[action.payload.articleId] = action.payload.comments;\n    }).addCase(loadCommentsForArticleId.rejected, (state, action) => {\n      state.isLoadingComments = false;\n      state.failedToLoadComments = true;\n      state.byArticleId = {};\n    }).addCase(postCommentForArticleId.pending, state => {\n      state.createCommentIsPending = true;\n      state.failedToCreateComment = false;\n    }).addCase(postCommentForArticleId.fulfilled, (state, action) => {\n      state.createCommentIsPending = false;\n      state.failedToCreateComment = false;\n      state.byArticleId[action.payload.articleId].push(action.payload);\n    }).addCase(postCommentForArticleId.rejected, (state, action) => {\n      state.createCommentIsPending = false;\n      state.failedToCreateComment = true;\n    });\n  }\n});\nexport const selectComments = state => state.comments.byArticleId;\nexport const isLoadingComments = state => state.comments.isLoadingComments;\nexport const createCommentIsPending = state => state.comments.createCommentIsPending;\nexport default commentsSlice.reducer;","map":{"version":3,"sources":["C:/Users/Andres R. Bucheli/Desktop/SOFTWARE ENGINEER/PORTFOLIO/ROCK-NEWS-REDUX/src/features/comments/commentsSlice.js"],"names":["createAsyncThunk","createSlice","loadCommentsForArticleId","id","console","log","data","fetch","json","postCommentForArticleId","articleId","comment","requestBody","JSON","stringify","response","method","body","commentsSlice","name","initialState","byArticleId","isLoadingComments","failedToLoadComments","createCommentIsPending","failedToCreateComment","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","comments","rejected","push","selectComments","reducer"],"mappings":"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","sourcesContent":["// Import createAsyncThunk and createSlice here.\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\n// Create loadCommentsForArticleId here.\r\nexport const loadCommentsForArticleId = createAsyncThunk(\r\n  'comments/loadCommentsForArticleId',\r\n  async (id) => {\r\n    console.log(\"inside dispatch\");\r\n    const data = await fetch(`api/articles/${id}/comments`);\r\n    const json = await data.json();\r\n    return json;    \r\n  }\r\n);\r\n// Create postCommentForArticleId here.\r\nexport const postCommentForArticleId = createAsyncThunk(\r\n  'comments/postCommentForArticleId',\r\n  async ({articleId, comment}) => {\r\n    const requestBody = JSON.stringify({comment: comment});\r\n    const response = await fetch(`api/articles/${articleId}/comments`, {\r\n      method: \"POST\",\r\n      body: requestBody,\r\n    });\r\n    const json = await response.json();\r\n    return json;\r\n  }\r\n);\r\nexport const commentsSlice = createSlice({\r\n  name: 'comments',\r\n  initialState: {\r\n    // Add initial state properties here.\r\n    byArticleId: {},\r\n    isLoadingComments: false,\r\n    failedToLoadComments: false,\r\n    createCommentIsPending: false,\r\n    failedToCreateComment: false,\r\n  },\r\n  // Add extraReducers here.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadCommentsForArticleId.pending, (state) => {\r\n        state.isLoadingComments = true;\r\n        state.failedToLoadComments = false;\r\n      })\r\n      .addCase(loadCommentsForArticleId.fulfilled, (state, action) => {\r\n        state.isLoadingComments = false;\r\n        state.failedToLoadComments = false;\r\n        state.byArticleId[action.payload.articleId] = action.payload.comments;\r\n      })\r\n      .addCase(loadCommentsForArticleId.rejected, (state, action) => {\r\n        state.isLoadingComments = false;\r\n        state.failedToLoadComments = true;\r\n        state.byArticleId = {};\r\n      })\r\n      .addCase(postCommentForArticleId.pending, (state) => {\r\n        state.createCommentIsPending = true;\r\n        state.failedToCreateComment = false;\r\n      })\r\n      .addCase(postCommentForArticleId.fulfilled, (state, action) => {\r\n        state.createCommentIsPending = false;\r\n        state.failedToCreateComment = false;\r\n        state.byArticleId[action.payload.articleId].push(action.payload);\r\n      })\r\n      .addCase(postCommentForArticleId.rejected, (state, action) => {\r\n        state.createCommentIsPending = false;\r\n        state.failedToCreateComment = true;\r\n      })\r\n  },\r\n});\r\n\r\nexport const selectComments = (state) => state.comments.byArticleId;\r\nexport const isLoadingComments = (state) => state.comments.isLoadingComments;\r\nexport const createCommentIsPending = (state) => state.comments.createCommentIsPending;\r\n\r\nexport default commentsSlice.reducer;"]},"metadata":{},"sourceType":"module"}